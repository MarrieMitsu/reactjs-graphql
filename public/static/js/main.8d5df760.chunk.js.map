{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","components/RocketItem.js","components/Rockets.js","components/Rocket.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_year","launch_success","style","margin","padding","borderTop","width","color","to","LAUNCHES_QUERY","gql","Launches","content","useQuery","loading","error","data","message","launches","map","key","LAUNCH_QUERY","Launch","match","params","parseInt","variables","marginTop","marginLeft","rocket","rocket_name","rocket_type","RocketItem","rocket_id","ROCKETS_QUERY","Rockets","rockets","ROCKET_QUERY","Rocket","id","marginBottom","active","boosters","cost_per_launch","first_flight","country","description","href","wikipedia","target","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","textAlign","display","justifyContent","borderBottom","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8d5df760.chunk.js","sourcesContent":["// Import\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// LaunchItem\r\nconst LaunchItem = ({ launch: {flight_number, mission_name, launch_year, launch_success} }) => {\r\n    return (\r\n        <div \r\n            style={{\r\n                margin: '10px', \r\n                padding: '10px',\r\n                borderTop: '1px dashed',\r\n                width: 'auto'\r\n            }}\r\n        >\r\n            <h4>Flight number : {flight_number}</h4>\r\n            <h4>Mission name : {mission_name}</h4>\r\n            <h4>Launch year : {launch_year}</h4>\r\n            <h4>\r\n                Launch status : \r\n                <span style={{\r\n                    color: launch_success ? 'rgba(47, 113, 214, 1)' : 'rgba(231, 53, 71, 1)'\r\n                }}>\r\n                    {launch_success ? ' Success' : ' Failed'}\r\n                </span>\r\n            </h4>\r\n            <h4><Link to={`/launch/${flight_number}`}>Details</Link></h4>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Export\r\nexport default LaunchItem;","// Import\r\nimport React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\nimport LaunchItem from './LaunchItem';\r\n\r\n// Launches query\r\nconst LAUNCHES_QUERY = gql`\r\n    query LauchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\n// Launches\r\nconst Launches = () => {\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n    let content;\r\n\r\n    if (loading) {\r\n        content = (\r\n            <h3>Loading...</h3>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <h3>{error.message}</h3>\r\n        );\r\n    } else {\r\n        content = data.launches.map(launch => (\r\n            <LaunchItem key={launch.flight_number} launch={launch} />\r\n        ));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2># Launches</h2>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Export\r\nexport default Launches;","// Import\r\nimport React from 'react';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\n// Launch query\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery ($flight_number: Int!) {\r\n        launch (flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// Launch\r\nconst Launch = ({match}) => {\r\n    let { flight_number } = match.params;\r\n    flight_number = parseInt(flight_number);\r\n    let content;\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {variables: { flight_number }});\r\n\r\n    if (loading) {\r\n        content = (\r\n            <h3>Loading...</h3>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <h3>{error.message}</h3>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div style={{ padding: '5px' }}>\r\n                <h4 style={{ margin: '5px' }}><Link to=\"/\">Back</Link></h4>\r\n                <h2>#{flight_number} [{data.launch.mission_name}] </h2>\r\n                <div\r\n                    style={{\r\n                        margin: '10px',\r\n                        padding: '10px',\r\n                        width: 'auto'\r\n                    }}\r\n                >\r\n                    <h3>Flight number : {data.launch.flight_number}</h3>\r\n                    <h3>Mission name : {data.launch.mission_name}</h3>\r\n                    <h3>Launch year : {data.launch.launch_year}</h3>\r\n                    <h3>\r\n                        Launch status :\r\n                        <span style={{\r\n                            color: data.launch.launch_success ? 'rgba(47, 113, 214, 1)' : 'rgba(231, 53, 71, 1)'\r\n                        }}>\r\n                            {data.launch.launch_success ? ' Success' : ' Failed'}\r\n                        </span>\r\n                    </h3>\r\n                    <div style={{ marginTop: '20px' }}>\r\n                        <h3>Rocket : </h3>\r\n                        <div\r\n                            style={{marginLeft: '10px',}}\r\n                        >\r\n                            <h3>Rocket name : {data.launch.rocket.rocket_name}</h3>\r\n                            <h3>Rocket type : {data.launch.rocket.rocket_type}</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\n// Export\r\nexport default Launch;","// Import\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// RocketItem\r\nconst RocketItem = ({rocket: {rocket_id, rocket_name, rocket_type}}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: '10px',\r\n                padding: '10px',\r\n                borderTop: '1px dashed',\r\n                width: 'auto'\r\n            }}\r\n        >\r\n            <h4>Rocket id : {rocket_id}</h4>\r\n            <h4>Rocket name : {rocket_name}</h4>\r\n            <h4>Rocket type : {rocket_type}</h4>\r\n            <h4><Link to={`/rocket/${rocket_id}`}>Details</Link></h4>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Export\r\nexport default RocketItem;","// Import\r\nimport React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\nimport RocketItem from './RocketItem';\r\n\r\n// Rockets query\r\nconst ROCKETS_QUERY = gql`\r\n    query RocketsQuery {\r\n        rockets {\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n    }\r\n`;\r\n\r\n// Rockets\r\nconst Rockets = () => {\r\n    const { loading, error, data } = useQuery(ROCKETS_QUERY);\r\n    let content;\r\n\r\n    if (loading) {\r\n        content = (\r\n            <h3>Loading...</h3>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <h3>{error.message}</h3>\r\n        );\r\n    } else {\r\n        content = data.rockets.map(rocket => (\r\n            <RocketItem key={rocket.rocket_id} rocket={rocket} />\r\n        ));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2># Rockets</h2>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Export\r\nexport default Rockets;","// Import \r\nimport React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\n// Rocket query\r\nconst ROCKET_QUERY = gql`\r\n    query RocketQuery ($rocket_id: String!) {\r\n        rocket (rocket_id: $rocket_id) {\r\n            id\r\n            active\r\n            boosters\r\n            cost_per_launch\r\n            first_flight\r\n            country\r\n            wikipedia\r\n            description\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n    }\r\n`;\r\n\r\n// Rocket\r\nconst Rocket = ({match}) => {\r\n    let { rocket_id } = match.params;\r\n    let content;\r\n    const { loading, error, data } = useQuery(ROCKET_QUERY, {variables: { rocket_id }});\r\n\r\n    if (loading) {\r\n        content = (\r\n            <h3>Loading...</h3>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <h3>{error.message}</h3>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div style={{ padding: '5px' }}>\r\n                <h4 style={{ margin: '5px' }}><Link to=\"/rockets\">Back</Link></h4>\r\n                <h2>#{data.rocket.id} [{data.rocket.rocket_name}] </h2>\r\n                <div\r\n                    style={{\r\n                        margin: '10px',\r\n                        padding: '10px',\r\n                        width: 'auto'\r\n                    }}\r\n                >\r\n                    <div style={{marginBottom: '20px'}}>\r\n                        <h3>Rocket id : {data.rocket.rocket_id}</h3>\r\n                        <h3>Rocket name : {data.rocket.rocket_name}</h3>\r\n                        <h3>Rocket type : {data.rocket.rocket_type}</h3>\r\n                        <h3>\r\n                            Rocket status :\r\n                        <span style={{\r\n                                color: data.rocket.active ? 'rgba(47, 113, 214, 1)' : 'rgba(231, 53, 71, 1)'\r\n                            }}>\r\n                                {data.rocket.active ? ' Active' : ' Deactive'}\r\n                            </span>\r\n                        </h3>\r\n                        <h3>Number of boosters : {data.rocket.boosters}</h3>\r\n                        <h3>Cost per launch : ${data.rocket.cost_per_launch}</h3>\r\n                    </div>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <h3>First flight : {data.rocket.first_flight}</h3>\r\n                        <h3>Country : {data.rocket.country}</h3>\r\n                    </div>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <h3>description : {data.rocket.description}</h3>\r\n                    </div>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <h3>\r\n                            Wikipedia :\r\n                        <a href={data.rocket.wikipedia} target=\"_blank\">{data.rocket.wikipedia}</a>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\n// Export\r\nexport default Rocket;","// Import\nimport React from 'react';\nimport './App.css';\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport Rockets from './components/Rockets';\nimport Rocket from './components/Rocket';\n\n// Apollo client\nconst client = new ApolloClient({\n\turi: '/graphql',\n\tcache: new InMemoryCache()\n});\n\n// App\nconst App = () => {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: 'center', padding: '10px'}}>Space-X Api V3</h1>\n\t\t\t\t\t<small>\n\t\t\t\t\t\tSrc: \n\t\t\t\t\t\t<a href=\"https://github.com/r-spacex/SpaceX-API\" target=\"_blank\">https://github.com/r-spacex/SpaceX-API</a>\n\t\t\t\t\t</small>\n\t\t\t\t\t<div \n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '10px',\n\t\t\t\t\t\t\tpadding: '10px', \n\t\t\t\t\t\t\tdisplay: 'flex', \n\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\tborderBottom: '1px solid',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<h4 style={{padding: '5px'}}><Link to=\"/\">Launches</Link></h4>\n\t\t\t\t\t\t<h4 style={{ padding: '5px' }}><Link to=\"/rockets\">Rockets</Link></h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact component={Launches} />\n\t\t\t\t\t\t<Route path=\"/launch/:flight_number\" exact component={Launch} />\n\t\t\t\t\t\t<Route path=\"/rockets\" exact component={Rockets} />\n\t\t\t\t\t\t<Route path=\"/rocket/:rocket_id\" exact component={Rocket} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</ApolloProvider>\n\t\t</BrowserRouter>\n\t);\n}\n \n// Export\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}